name: "RedSock/Releaser"
description: "Creates Docker image and pushes it to Dockerhub or Private registry"

author: "RedSock"

branding:
  icon: "git-pull-request"
  color: "red"

inputs:
  REGISTRY_URL:
    description: "URL Name of private Docker registry to push to"
    default: "docker.io"
  REGISTRY_USER:
    description: "Registry user"
    required: true
  REGISTRY_PWD:
    description: "Registry tag"
    required: true
  PLATFORMS:
    description: "Platforms to build to"
    default: "linux/amd64,linux/arm64"
  IMAGE_NAME:
    description: "Final image name"
    default: ""
  DISABLE_CHECKOUT:
    description: "Disables checkout on start"
    default: "false"
  DRYRUN:
    description: "Builds but doesn't push image to registry"
    default: "false"
runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@v4
      if: ${{ inputs.DISABLE_CHECKOUT != 'true' }}
      with:
        ref: ${{ github.ref }}
        fetch-depth: 0

    - name: Set up Docker BuildX
      uses: docker/setup-buildx-action@v3

    - name: Get Latest Tag
      uses: WyriHaximus/github-action-get-previous-tag@v1.4.0
      id: git_tag

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.REGISTRY_URL }}
        username: ${{ inputs.REGISTRY_USER }}
        password: ${{ inputs.REGISTRY_PWD }}

    - name: Build image to dockerhub
      shell: bash
      run: |
        IMAGE_ID=$(echo ${{ inputs.IMAGE_NAME }})
        
        if [ -z "$IMAGE_ID" ]; then 
          IMAGE_ID=$(echo ${{ inputs.REGISTRY_USER }}/${{ github.event.repository.name }} | tr '[A-Z]' '[a-z]')
        fi
        
        VERSION=$(echo "${{ steps.git_tag.outputs.tag }}" | sed -e 's,.*/\(.*\),\1,')
        
        echo IMAGE_ID=$IMAGE_ID
        echo VERSION=$VERSION
        
        BUILD_FLAGS=""
        PLATFORM_FLAGS=""
        TARGET_FLAG=""
        
        if [ "${{ inputs.DRYRUN == 'true' }}" ]; then 
          BUILD_FLAGS="--load"
          PLATFORM_FLAGS="linux/amd64"
          TARGET_FLAG="--target builder"
        else 
          BUILD_FLAGS="--push"
          PLATFORM_FLAGS="${{ inputs.PLATFORMS }}"
        fi
        
        docker buildx build \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            --cache-to=type=local,dest=/tmp/.buildx-cache-new \
            --platform $PLATFORM_FLAGS $TARGET_FLAG \
            -t $IMAGE_ID:$VERSION \
            -t $IMAGE_ID:latest \
            $BUILD_FLAGS  .

