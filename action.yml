name: "RedSock/Releaser"
description: "Creates Docker image and pushes it to Dockerhub or Private registry"

author: "RedSock"

branding:
  icon: "git-pull-request"
  color: "red"

inputs:
  REGISTRY_URL:
    description: "URL of the Docker registry to push to"
    default: "docker.io"
  REGISTRY_USER:
    description: "Registry user"
    required: true
  REGISTRY_PWD:
    description: "Registry password or token"
    required: true
  PLATFORMS:
    description: "Platforms to build for"
    default: "linux/amd64,linux/arm64"
  IMAGE_NAME:
    description: "Final image name"
    default: ""
  DISABLE_CHECKOUT:
    description: "Disables checkout on start"
    default: "false"
  OUTPUT:
    description: "Comma-separated outputs like registry:<url>,file:<path>"
    default: "registry:docker.io"

runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@v4
      if: ${{ inputs.DISABLE_CHECKOUT == 'false' }}
      with:
        ref: ${{ github.ref }}
        fetch-depth: 0

    - name: Set up Docker BuildX
      uses: docker/setup-buildx-action@v3

    - name: Get Latest Tag
      uses: WyriHaximus/github-action-get-previous-tag@v1.4.0
      id: git_tag

    - name: Parse OUTPUT inputs
      id: parse_output
      shell: python
      run: |
        import os
        
        output_param = os.getenv("INPUT_OUTPUT", "")
        entries = [o.strip() for o in output_param.split(",") if o.strip()]
        
        reg_urls = []
        file_paths = []
        
        for entry in entries:
            if entry.startswith("registry:"):
                reg_urls.append(entry.split(":", 1)[1])
            elif entry.startswith("file:"):
                file_paths.append(entry.split(":", 1)[1])
        
        with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
            fh.write(f"registry_urls={'::'.join(reg_urls)}\n")
            fh.write(f"file_paths={'::'.join(file_paths)}\n")

    - name: Login to Docker Registry
      if: ${{ steps.parse_output.outputs.registry_urls != '' }}
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.REGISTRY_URL }}
        username: ${{ inputs.REGISTRY_USER }}
        password: ${{ inputs.REGISTRY_PWD }}

    - name: Build image
      shell: bash
      run: |
        IMAGE_ID="${{ inputs.IMAGE_NAME }}"
        [ -z "$IMAGE_ID" ] && IMAGE_ID="${{ inputs.REGISTRY_USER }}/${{ github.event.repository.name }}" && IMAGE_ID=$(echo "$IMAGE_ID" | tr '[:upper:]' '[:lower:]')

        VERSION=$(echo "${{ steps.git_tag.outputs.tag }}" | sed -e 's,.*/\(.*\),\1,')
        echo "IMAGE_ID=$IMAGE_ID"
        echo "VERSION=$VERSION"

        TAGS="-t $IMAGE_ID:$VERSION -t $IMAGE_ID:latest"

        # Build and push only if registry output exists
        if [ "${{ steps.parse_output.outputs.registry_urls }}" != "" ]; then
          docker buildx build --platform ${{ inputs.PLATFORMS }} $TAGS --push .
          echo "Docker image pushed to registry"
        fi

        # Save image locally if file output exists
        if [ "${{ steps.parse_output.outputs.file_paths }}" != "" ]; then
          docker buildx build --platform ${{ inputs.PLATFORMS }} $TAGS --load .
          for path in $(echo "${{ steps.parse_output.outputs.file_paths }}" | tr '::' ' '); do
            mkdir -p "$path"
            docker save $IMAGE_ID:$VERSION -o "$path/image-$VERSION.tar"
            echo "Docker image saved to $path/image-$VERSION.tar"
          done
        fi

        echo "Docker image processing completed" >> $GITHUB_STEP_SUMMARY
