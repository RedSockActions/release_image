name: "RedSock/Releaser"
description: "Creates Docker image and pushes it to Dockerhub or Private registry"

author: "RedSock"

branding:
  icon: "git-pull-request"
  color: "red"

inputs:
  REGISTRY_USER:
    description: "Registry user"
    default: "redsock"
  REGISTRY_PWD:
    description: "Registry password or token"
    default: ""
  PLATFORMS:
    description: "Platforms to build for"
    default: "linux/amd64,linux/arm64"
  IMAGE_NAME:
    description: "Final image name"
    default: ""
  DISABLE_CHECKOUT:
    description: "Disables checkout on start"
    default: "false"
  OUTPUT:
    description: "Comma-separated outputs like registry:<url>,file:<path>"
    default: "registry:docker.io"
  PREBUILT_IMAGE_PATH:
    description: "Path to a Docker image tar file to load and push"
    default: ""

runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@v4
      if: ${{ inputs.DISABLE_CHECKOUT == 'false' }}
      with:
        ref: ${{ github.ref }}
        fetch-depth: 0

    - name: Set up Docker BuildX
      uses: docker/setup-buildx-action@v3
      if:  ${{ inputs.REGISTRY_PWD != '' }}

    - name: Get Latest Tag
      uses: WyriHaximus/github-action-get-previous-tag@v1.4.0
      id: git_tag

    - name: Parse OUTPUT inputs
      id: parse_output
      shell: python
      run: |
        import os
        
        output_param = os.getenv("INPUT_OUTPUT", "")
        entries = [o.strip() for o in output_param.split(",") if o.strip()]
        
        reg_urls = []
        file_path = '.'
        
        for entry in entries:
            if entry.startswith("registry:"):
                reg_urls.append(entry.split(":", 1)[1])
            elif entry.startswith("file:"):
                file_path = entry.split(":", 1)[1]
        
        with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
            fh.write(f"registry_urls={'::'.join(reg_urls)}\n")
            fh.write(f"file_path={file_path}\n")

    - name: Login to Docker Registry
      if: ${{ steps.parse_output.outputs.registry_urls != '' }}
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.REGISTRY_URL }}
        username: ${{ inputs.REGISTRY_USER }}
        password: ${{ inputs.REGISTRY_PWD }}

    - name: Build image
      shell: bash
      run: |
        IMAGE_ID="${{ inputs.IMAGE_NAME }}"
        [ -z "$IMAGE_ID" ] && IMAGE_ID="${{ inputs.REGISTRY_USER }}/${{ github.event.repository.name }}"
        IMAGE_ID=$(echo "$IMAGE_ID" | tr '[:upper:]' '[:lower:]')
        
        VERSION=$(echo "${{ steps.git_tag.outputs.tag }}" | sed -e 's,.*/\(.*\),\1,')
        echo "IMAGE_ID=$IMAGE_ID"
        echo "VERSION=$VERSION"
        
        TAGS="-t $IMAGE_ID:$VERSION -t $IMAGE_ID:latest"
        
        if [ -n "${{ inputs.PREBUILT_IMAGE_PATH }}" ]; then
          echo "Using prebuilt image from: ${{ inputs.PREBUILT_IMAGE_PATH }}"
          docker load -i "${{ inputs.PREBUILT_IMAGE_PATH }}"
        else
          echo "Building image using buildx..."
          docker buildx build --platform "${{ inputs.PLATFORMS }}" $TAGS --load .
        fi
        
        # Save the image to a tar file if file output is defined and it's not prebuilt
        if [ -z "${{ inputs.PREBUILT_IMAGE_PATH }}" ] && [ "${{ steps.parse_output.outputs.file_path }}" != "" ]; then
          FILE_PATH="${{ steps.parse_output.outputs.file_path }}"
          FILE_NAME="$(echo "$IMAGE_ID" | tr '/:' '_')-$VERSION.tar"
          mkdir -p "$FILE_PATH"
          docker save "$IMAGE_ID:$VERSION" -o "$FILE_PATH/$FILE_NAME"
          echo "Docker image saved to $FILE_PATH/$FILE_NAME"
        fi
        
        # Push to registry if registry output is defined
        if [ "${{ steps.parse_output.outputs.registry_urls }}" != "" ]; then
          echo "Pushing image to registry..."
          docker push "$IMAGE_ID:$VERSION"
          echo "Docker image pushed to registry"
        fi
        
        echo "Docker image processing completed" >> $GITHUB_STEP_SUMMARY
